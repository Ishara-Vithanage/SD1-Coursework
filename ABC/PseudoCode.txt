FUNCTION validate_date_input(message, error_message, max_value, min_value)
    LOOP
        TRY
            PROMPT user with message
            GET user input AS integer
            IF input is within range (min_value <= input <= max_value)
                FORMAT input as two-digit string IF necessary
                RETURN formatted input
            ELSE
                DISPLAY error_message
	    END IF
        CATCH EXCEPTION ValueError
            DISPLAY "Integer required"

FUNCTION validate_continue_input()
    PROMPT user: "Do you want to select another data file for a different date? Y/N >"
    IF user input is "N" or "n"
        DISPLAY "End of run"
        RETURN False
    ELSE IF user input is "Y" or "y"
        RETURN True
    ELSE
        LOOP
            PROMPT user: "Please enter 'Y' or 'N' >"
            IF user input is "N" or "n"
                DISPLAY "End of run"
                RETURN False
            ELSE IF user input is "Y" or "y"
                RETURN True
	    END IF
    END IF

FUNCTION process_csv_data(file_path)
    TRY
        INITIALIZE traffic_data_list AS list of 16 zeroes
        SET traffic_data_list[0] = file_path
        OPEN file_path FOR reading
        SKIP header row
        INITIALIZE counters: 
		bikes_count, 
		scooter_count, 
		current_hour, 
		vehicles_ph, 
		max_vehicles_ph, 
		max_vehicles_frm_hour, 
		total_elm_avenue, 
		rain_hours, 
		rain_minutes, 
		rain_times, 
		previous_weather

        FOR each row in CSV data
            INCREMENT traffic_data_list[1] FOR total vehicles
            SPLIT row INTO columns

            IF columns[8] == "Truck"
                INCREMENT traffic_data_list[2]
	    END IF
            IF columns[9] == "True" (Electric vehicle)
                INCREMENT traffic_data_list[3]
	    END IF
            IF columns[8] IS "Bicycle", "Motorcycle", or "Scooter"
                INCREMENT traffic_data_list[4]
	    END IF
            IF columns[8] == "Buss" AND direction matches Elm Avenue/Rabbit Road North
                INCREMENT traffic_data_list[5]
	    END IF
            IF direction unchanged
                INCREMENT traffic_data_list[6]
	    END IF

            CALCULATE truck_percent = (traffic_data_list[2] / traffic_data_list[1]) * 100
            STORE formatted truck_percent IN traffic_data_list[7]

            IF columns[8] == "Bicycle"
                INCREMENT bikes_count
	    END IF
            CALCULATE average bikes/hour AND STORE in traffic_data_list[8]

            IF speed > speed limit
                INCREMENT traffic_data_list[9]
	    END IF

            IF origin is Elm Avenue/Rabbit Road
                INCREMENT traffic_data_list[10]
            ELSE IF origin is Hanley Highway/Westway
                INCREMENT traffic_data_list[11]
	    END IF

            IF Scooter at Elm Avenue/Rabbit Road
                INCREMENT scooter_count
	    END IF
            CALCULATE scooter percentage at Elm Avenue/Rabbit Road AND STORE in traffic_data_list[12]

            UPDATE hourly vehicle counts FOR Hanley Highway/Westway
            STORE peak hour vehicle counts IN traffic_data_list[13] AND [14]

            TRACK rain periods AND CALCULATE total rain duration
            STORE total rain hours and minutes IN traffic_data_list[15]

        RETURN traffic_data_list

    CATCH EXEPTION FileNotFoundError
        DISPLAY "File directory not found"

FUNCTION display_outcomes(outcomes)
    INITIALIZE results AS empty list
    APPEND formatted outcome strings INTO results list
    FOR each result IN results
        DISPLAY result
    RETURN results

FUNCTION save_results_to_file(outcomes, file_name = "results.txt")
    OPEN file_name IN append mode
    FOR each outcome IN outcomes
        WRITE outcome TO file




## Program Flow

LOOP
    CALL validate_date_input TO GET day, month, year
    FORMAT date INTO file_name AS "traffic_dataDDMMYYYY.csv"
    
    CALL process_csv_data(file_name) TO PROCESS traffic data
    IF process_csv_data RETURNS None
        CALL validate_continue_input TO CHECK continuation
        IF continuation is False
            EXIT loop
        ELSE
            CONTINUE
	END IF
    END IF
    CALL display_outcomes TO DISPLAY results
    CALL save_results_to_file TO SAVE results TO text file

    CALL validate_continue_input TO PROMPT for continuation
    IF continuation is False
        EXIT loop
    END IF

